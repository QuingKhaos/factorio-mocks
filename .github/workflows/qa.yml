name: Quality Assurance

on:
  push:
    branches: [main]
    tags: ["v*"]
  pull_request:
    branches: [main]

jobs:
  lint-and-format:
    runs-on: ubuntu-latest
    name: Documentation Quality and Linting

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install linting tools
        run: |
          npm install -g markdownlint-cli jsonlint
          pip3 install jsonschema

      - name: Check documentation structure
        run: |
          echo "üìö Checking documentation structure..."

          # Core planning documents
          test -f "planning/architecture.md" && echo "‚úÖ Architecture documentation found"
          test -d "planning/decisions" && echo "‚úÖ Architectural decisions directory found"
          test -f "planning/implementation-roadmap.md" && echo "‚úÖ Implementation roadmap found"
          test -f "planning/repository-specifications.md" && echo "‚úÖ Repository specifications found"
          test -f "planning/community-engagement.md" && echo "‚úÖ Community engagement found"

          # Essential project files
          test -f "README.md" && echo "‚úÖ README found"
          test -f ".markdownlint.json" && echo "‚úÖ Markdown lint configuration found"

          # Check for ADR files
          if [ -d "planning/decisions" ] && [ "$(ls -A planning/decisions/adr-*.md 2>/dev/null | wc -l)" -gt 0 ]; then
            echo "‚úÖ ADR files found in planning/decisions/"
          else
            echo "‚ùå No ADR files found in planning/decisions/"
          fi

          echo "‚úÖ Documentation structure check completed"

      - name: Validate JSON files
        run: |
          echo "üîß Validating JSON files..."

          # Function to validate JSON files
          validate_json() {
            if [ -f "$1" ]; then
              if python3 -m json.tool "$1" > /dev/null 2>&1; then
                echo "‚úÖ $1 is valid"
              else
                echo "‚ùå $1 is invalid"
                python3 -m json.tool "$1"
                return 1
              fi
            else
              echo "‚ö†Ô∏è $1 not found (optional)"
            fi
          }

          # Validate configuration files
          validate_json ".markdownlint.json"
          validate_json ".vscode/settings.json"
          validate_json ".vscode/tasks.json"
          validate_json ".vscode/launch.json"

          # Find and validate any other JSON files
          echo "üîç Checking for additional JSON files..."
          find . -name "*.json" -not -path "./.git/*" | while read -r file; do
            validate_json "$file"
          done

          echo "‚úÖ JSON validation completed"

      - name: Lint JSON files with jsonlint
        run: |
          echo "üîç Linting JSON files with jsonlint..."

          # Function to lint JSON files with jsonlint
          lint_json() {
            if [ -f "$1" ]; then
              echo "Linting $1..."
              if jsonlint "$1" > /dev/null 2>&1; then
                echo "‚úÖ $1 passed jsonlint"
              else
                echo "‚ùå $1 failed jsonlint:"
                jsonlint "$1"
                return 1
              fi
            fi
          }

          # Lint configuration files
          lint_json ".markdownlint.json"
          lint_json ".vscode/settings.json"
          lint_json ".vscode/tasks.json"
          lint_json ".vscode/launch.json"

          echo "‚úÖ JSON linting completed"

      - name: Lint Markdown files
        run: |
          echo "üìù Linting Markdown files..."

          # Use markdownlint with the project configuration
          if [ -f ".markdownlint.json" ]; then
            echo "Using .markdownlint.json configuration"
            markdownlint --config .markdownlint.json "**/*.md" || {
              echo "‚ùå Markdown linting failed"
              echo "üí° Run 'markdownlint --config .markdownlint.json --fix **/*.md' to auto-fix issues"
              exit 1
            }
          else
            echo "No .markdownlint.json found, using default rules"
            markdownlint "**/*.md" || {
              echo "‚ùå Markdown linting failed"
              exit 1
            }
          fi

          echo "‚úÖ Markdown linting completed"
